{"version":3,"sources":["../src/BongoTool.js"],"names":["streamToString","readable","stream","Readable","toString","Promise","resolve","reject","string","on","buffer","read","error","pipe","writeable","execAsync","cp","exec","BongoTool","constructor","toolName","log","ensureCommands","cmds","forEach","cmd","Error","getPassword","generateAdminPasswords","dbName","root","backup","restore","generatePasswords","admin","user","readCredentials","credentials","fs","existsSync","credentialsFile","json","readFile","encoding","JSON5","parse","writeCredentials","stringify","writeFile","mode","users","result","tf","passwords","info","hasSecurity","tmp","file","postfix","fd","path","stdout","message","cleanup","args","usersAdmin","dateTime","utc","format","backupFile","archiveFilename","mongo","auth","bindAll","platform","os","modifyMongoConf","mongoConfFile","conf","yaml","safeLoad","security","authorization","net","bindIp","confYaml","safeDump","userInfo","username","match","warning","run","argv","options","boolean","version","fullVersion","command","_","toLowerCase","ensureDir","dir","help","join","process","env","HOME"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\nimport os from \"os\"\nimport process from \"process\"\nimport cp from \"child_process\"\nimport { sync as commandExistsSync } from \"command-exists\"\nimport JSON5 from \"json5\"\nimport randomize from \"randomatic\"\nimport tmp from \"tmp-promise\"\nimport { promisify } from \"util\"\nimport moment from \"moment\"\nimport yaml from \"js-yaml\"\nimport stream from \"stream\"\n\nfunction streamToString(readable) {\n  if (!(readable instanceof stream.Readable)) {\n    return readable.toString()\n  }\n\n  return new Promise((resolve, reject) => {\n    let string = \"\"\n\n    readable.on(\"readable\", (buffer) => {\n      string += buffer.read().toString()\n    })\n\n    readable.on(\"end\", () => {\n      resolve(string)\n    })\n\n    readable.on(\"error\", (error) => {\n      reject(error)\n    })\n\n    readable.pipe(writeable)\n  })\n}\n\nconst execAsync = promisify(cp.exec)\n\nexport class BongoTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  static dir = path.join(process.env.HOME, \".bongo\")\n  static credentialsFile = path.join(BongoTool.dir, \"credentials.json5\")\n\n  ensureCommands(cmds) {\n    cmds.forEach((cmd) => {\n      if (!commandExistsSync(cmd)) {\n        throw new Error(`Command '${cmd}' does not exist.  Please install it.`)\n      }\n    })\n  }\n\n  static getPassword() {\n    return randomize(\"Aa0\", 16)\n  }\n\n  static generateAdminPasswords(dbName) {\n    return {\n      root: BongoTool.getPassword(),\n      backup: BongoTool.getPassword(),\n      restore: BongoTool.getPassword(),\n    }\n  }\n\n  static generatePasswords() {\n    return {\n      admin: BongoTool.getPassword(),\n      user: BongoTool.getPassword(),\n    }\n  }\n\n  async readCredentials() {\n    let credentials = {}\n\n    if (fs.existsSync(BongoTool.credentialsFile)) {\n      const json = await fs.readFile(BongoTool.credentialsFile, {\n        encoding: \"utf8\",\n      })\n\n      credentials = JSON5.parse(json)\n    }\n\n    return credentials\n  }\n\n  async writeCredentials(credentials) {\n    const json = JSON5.stringify(credentials, null, \"  \")\n\n    await fs.writeFile(BongoTool.credentialsFile, json, { mode: 0o600 })\n  }\n\n  async users(dbName) {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    if (!credentials.admin) {\n      this.log.error(\n        \"No 'admin' database root user.  Run tool on 'admin' database first.\"\n      )\n      return\n    }\n\n    this.log.info(\"Adding admin and user users to ${dbName} database\")\n\n    let hasSecurity = false\n\n    try {\n      result = await execAsync('mongo --eval \"db.getUsers()\"')\n    } catch (error) {\n      hasSecurity = true\n    }\n\n    if (!hasSecurity) {\n      this.log.error(\n        `You must enable MongoDB security to set '${dbName}' database credentials`\n      )\n      return\n    }\n\n    if (!credentials[dbName]) {\n      passwords = BongoTool.generatePasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.dropUser('admin')\ndb.createUser({user:\"admin\",pwd:\"${\n          passwords.admin\n        }\",roles:[\"readWrite\", \"dbAdmin\", \"userAdmin\"]})\ndb.dropUser('user')\ndb.createUser({user:\"user\",pwd:\"${\n          passwords.user\n        }\",roles:[\"readWrite\",\"dbAdmin\"]})\nquit()\n`\n      )\n\n      try {\n        result = await execAsync(\n          `mongo -u root -p ${\n            credentials.admin.root\n          } --authenticationDatabase admin --quiet ${tf.path}`\n        )\n        this.log.info(await streamToString(result.stdout))\n      } catch (error) {\n        this.log.error(\n          `Unable to create '${dbName}' database users. ${error.message}`\n        )\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      credentials[dbName] = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\nassert(db.getUser(\"admin\"))\nassert(db.getUser(\"user\"))\nquit()\n`\n    )\n    try {\n      result = await execAsync(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n      this.log.info(await streamToString(result.stdout))\n    } catch (error) {\n      this.log.error(\n        `Unable to confirm existing '${dbName}' database users. ${\n          error.message\n        }`\n      )\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    if (!this.args[\"new-passwords\"]) {\n      this.log.info(\n        `MongoDB '${dbName}' database users 'admin' & 'user' confirmed`\n      )\n      return\n    }\n\n    passwords = BongoTool.generatePasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.changeUserPassword(\"admin\", \"${passwords.admin}\")\ndb.changeUserPassword(\"user\", \"${passwords.user}\")\nquit()\n`\n    )\n\n    try {\n      result = await execAsync(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n    } catch (error) {\n      this.log.error(`Unable to change '${dbName}' database user passwords.`)\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials[dbName] = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(`MongoDB '${dbName}' database user passwords changed`)\n  }\n\n  async usersAdmin() {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    this.log.info(\"Adding root, backup and restore user to admin database\")\n\n    try {\n      result = await execAsync('mongo --eval \"db.getUsers()\" --quiet')\n    } catch (error) {\n      this.log.error(\n        \"You must disable MongoDB security initialize the admin database\"\n      )\n      return\n    }\n\n    if (!credentials.admin) {\n      passwords = BongoTool.generateAdminPasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB('admin')\ndb.dropUser('root')\ndb.createUser({user:\"root\",pwd:\"${\n          passwords.root\n        }\",roles:[\"userAdminAnyDatabase\",\"readAnyDatabase\",\"clusterAdmin\"]})\ndb.dropUser('backup')\ndb.createUser({user:\"backup\",pwd:\"${passwords.backup}\",roles:[\"backup\"]})\ndb.dropUser('restore')\ndb.createUser({user:\"restore\",pwd:\"${passwords.restore}\",roles:[\"restore\"]})\nquit()\n`\n      )\n      try {\n        result = await execAsync(`mongo ${tf.path} --quiet`)\n      } catch (error) {\n        this.log.error(\n          `Unable to create 'root' database users. ${error.message}`\n        )\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      this.log.info(await streamToString(result.stdout))\n\n      credentials.admin = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert(db.getUser(\"root\"))\nassert(db.getUser(\"backup\"))\nassert(db.getUser(\"restore\"))\nquit()\n`\n    )\n\n    try {\n      result = await execAsync(`mongo ${tf.path} --quiet`)\n    } catch (error) {\n      this.log.error(\n        `Unable to confirm existing 'admin' database users. ${error.message}`\n      )\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    this.log.info(await streamToString(result.stdout))\n\n    if (!this.args[\"new-passwords\"]) {\n      this.log.info(\n        \"MongoDB 'admin' database users 'root', 'backup' & 'restore' confirmed\"\n      )\n      return\n    }\n\n    passwords = BongoTool.generateAdminPasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert.eq(db, \"admin\")\ndb.changeUserPassword(\"root\", \"${passwords.root}\")\ndb.changeUserPassword(\"backup\", \"${passwords.backup}\")\ndb.changeUserPassword(\"restore\", \"${passwords.restore}\")\nquit()\n`\n    )\n    try {\n      result = await execAsync(`mongo ${tf.path} --quiet`)\n    } catch (error) {\n      this.log.error(\"Unable to change 'admin' database user passwords.\")\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials.admin = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(\"MongoDB 'admin' database user passwords changed\")\n  }\n\n  async backup(dbName) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n    const dateTime =\n      moment()\n        .utc()\n        .format(\"YYYYMMDD-hhmmss\") + \"Z\"\n    const backupFile = `${dbName}-${dateTime}.archive`\n\n    try {\n      let cmd = null\n      if (credentials.backup) {\n        cmd = `mongodump --gzip --archive=${backupFile} --db ${dbName} -u backup -p ${\n          passwords.backup\n        } --authenticationDatabase=admin`\n      } else {\n        cmd = `mongodump --gzip --archive=${backupFile} --db ${dbName}`\n      }\n      const result = await execAsync(cmd)\n      this.log.info(await streamToString(result.stdout))\n    } catch (error) {\n      this.log.error(`Unable to backup database '${dbName}'. ${error.message}`)\n      return\n    }\n\n    this.log.info(`MongoDB database '${dbName}' backed up to '${backupFile}'`)\n  }\n\n  async restore(archiveFilename) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n\n    try {\n      let cmd = null\n\n      if (credentials.restore) {\n        cmd = `mongorestore --gzip --archive=${archiveFilename} --drop -u restore -p ${\n          passwords.restore\n        } --authenticationDatabase=admin`\n      } else {\n        cmd = `mongorestore --gzip --archive=${archiveFilename} --drop`\n      }\n\n      const result = await execAsync(cmd)\n      this.log.info(await streamToString(result.stdout))\n    } catch (error) {\n      this.log.error(`Unable to restore database '${dbName}'. ${error.message}`)\n      return\n    }\n\n    this.log.info(`MongoDB database restored from '${archiveFilename}'`)\n  }\n\n  async mongo(auth, bindAll) {\n    const platform = os.platform()\n    const modifyMongoConf = async (mongoConfFile, auth, bindAll) => {\n      let conf = yaml.safeLoad(\n        await fs.readFile(mongoConfFile, { encoding: \"utf8\" })\n      )\n\n      conf.security.authorization = auth ? \"enabled\" : \"disabled\"\n\n      if (bindAll) {\n        conf.net.bindAll = true\n      } else {\n        conf.net.bindIp = \"127.0.0.1\"\n      }\n\n      const confYaml = yaml.safeDump(conf)\n\n      await fs.writeFile(mongoConfFile, confYaml)\n\n      return confYaml\n    }\n\n    this.log.info(\n      `Attempting to ${auth ? \"enable\" : \"disable\"} security and bind to ${\n        bindAll ? \"all\" : \"localhost\"\n      } IP address${bindAll ? \"es\" : \"\"}`\n    )\n\n    if (platform === \"linux\") {\n      if (os.userInfo().username !== \"root\") {\n        this.log.error(\"Must run this command under sudo on Linux\")\n        return\n      }\n\n      this.ensureCommands([\"systemctl\", \"lsb_release\"])\n\n      let result = null\n\n      try {\n        result = await cp.exec(\"lsb_release -a\")\n      } catch (error) {\n        this.log.error(`Cannot determine Linux release. ${error.message}`)\n        return\n      }\n\n      if (!(await streamToString(result.stdout)).match(/Ubuntu 1(6|8)\\./)) {\n        this.log.warning(\"This release of Linux has not been tested\")\n      }\n\n      modifyMongoConf(\"/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        result = await cp.exec(\"systemctl restart mongod\")\n      } catch (error) {\n        this.log.error(`Cannot restart 'mongod' service. ${error.message}`)\n      }\n    } else if (platform === \"darwin\") {\n      this.ensureCommands([\"brew\"])\n\n      modifyMongoConf(\"/usr/local/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        await cp.exec(\"brew services restart mongodb\")\n      } catch (error) {\n        this.log.error(`Unable to restart 'mongodb' service. ${error.message}`)\n      }\n    } else {\n      this.log.error(\n        \"This platform is not yet supported. Please consider submitting a PR!\"\n      )\n      return\n    }\n\n    this.log.info(\"MongoDB restarted\")\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"help\", \"version\", \"new-passwords\", \"auth\", \"bind-all\"],\n    }\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    let command = this.args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    await fs.ensureDir(BongoTool.dir)\n    this.ensureCommands([\"mongo\", \"mongostat\"])\n\n    switch (command) {\n      case \"users\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} users [db]\n\nDescription:\n\nEnsures that the users 'admin' & 'user' exist on regular database, and 'root',\n'backup' & 'restore' if the 'admin' database is specified.\n\nOptions:\n\n  --new-passwords   Generate new passwords for existing users.\n`)\n          return 0\n        }\n        if (this.args._[1] === \"admin\") {\n          await this.usersAdmin()\n        } else {\n          await this.users(this.args._[1])\n        }\n        break\n      case \"backup\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} backup <db>\n\nDescription:\n\nBacks up all non-system collections in the given database creating a\ntimestamped .archive file.\n`)\n          return 0\n        }\n        const dbName = this.args._[1]\n\n        if (!dbName) {\n          throw new Error(`Database name must be given`)\n        }\n\n        await this.backup(dbName)\n        break\n      case \"restore\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} restore <archive>\n\nDescription:\n\nRestores the database in the given .archive file.  The database will be restored\nwith the name it had when backed up.\n`)\n          return 0\n        }\n        const archiveFilename = this.args._[1]\n\n        if (!archiveFilename) {\n          throw new Error(`Archive file name must be given`)\n        }\n\n        await this.restore(archiveFilename)\n        break\n      case \"mongo\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} mongo [online|offline]\n\nDescription:\n\nBrings the the MongoDB daemon online or offline to enable changes to the\nthe admin database 'root', 'backup' and 'restore' users.\n\nOptions:\n\n--[no-]auth       Enabled/disable security for the MongoDB instance\n--[no-]bind-all   Bind to all network interfaces or bind only to localhost\n`)\n          return 0\n        }\n        await this.mongo(this.args.auth, this.args[\"bind-all\"])\n        break\n      case \"help\":\n      default:\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nDescription:\n\nOpinionated MongoDB management tool. Ensures correct users and passwords\nfor databases and stores them in a credentials file. Generates and\nrestores backups archives using stored credentials.\n\nCommands:\n  users      Ensures that appropriate users and passwords exist\n             for a database.\n  backup     Create a timestamped backup of a database.\n  restore    Restore a database backup.\n  mongo      Take MongoDB service offline or online.\n\nGlobal Options:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"],"file":"BongoTool.js"}