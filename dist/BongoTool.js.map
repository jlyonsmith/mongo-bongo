{"version":3,"sources":["../src/BongoTool.js"],"names":["execAsync","cp","exec","BongoTool","constructor","toolName","log","ensureCommands","cmds","forEach","cmd","Error","getPassword","generateAdminPasswords","dbName","root","backup","restore","generatePasswords","admin","user","readCredentials","credentials","fs","existsSync","credentialsFile","json","readFile","encoding","JSON5","parse","writeCredentials","stringify","writeFile","mode","users","newPassword","result","tf","passwords","error","info","hasSecurity","tmp","file","postfix","fd","path","stdout","message","cleanup","usersAdmin","hostPort","newDbName","outputPath","dateTime","utc","format","backupFile","parseInt","process","cwd","lstatSync","isDirectory","tmpObj","dir","unsafeCleanup","dumpDir","join","stderr","rename","move","archiveFilename","resolve","mongo","auth","bindAll","platform","os","modifyMongoConf","mongoConfFile","conf","yaml","safeLoad","security","authorization","net","bindIp","confYaml","safeDump","userInfo","username","match","warning","run","argv","options","string","boolean","args","version","fullVersion","command","_","toLowerCase","debug","ensureDir","help","env","HOME"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,GAAG,qBAAUC,uBAAGC,IAAb,CAAlB;;AAEO,MAAMC,SAAN,CAAgB;AACrBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACzB,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AAKDC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnBA,IAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAS;AACpB,UAAI,CAAC,yBAAkBA,GAAlB,CAAL,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAW,YAAWD,GAAI,uCAA1B,CAAN;AACD;AACF,KAJD;AAKD;;AAED,SAAOE,WAAP,GAAqB;AACnB,WAAO,yBAAU,KAAV,EAAiB,EAAjB,CAAP;AACD;;AAED,SAAOC,sBAAP,CAA8BC,MAA9B,EAAsC;AACpC,WAAO;AACLC,MAAAA,IAAI,EAAEZ,SAAS,CAACS,WAAV,EADD;AAELI,MAAAA,MAAM,EAAEb,SAAS,CAACS,WAAV,EAFH;AAGLK,MAAAA,OAAO,EAAEd,SAAS,CAACS,WAAV;AAHJ,KAAP;AAKD;;AAED,SAAOM,iBAAP,GAA2B;AACzB,WAAO;AACLC,MAAAA,KAAK,EAAEhB,SAAS,CAACS,WAAV,EADF;AAELQ,MAAAA,IAAI,EAAEjB,SAAS,CAACS,WAAV;AAFD,KAAP;AAID;;AAED,QAAMS,eAAN,GAAwB;AACtB,QAAIC,WAAW,GAAG,EAAlB;;AAEA,QAAIC,iBAAGC,UAAH,CAAcrB,SAAS,CAACsB,eAAxB,CAAJ,EAA8C;AAC5C,YAAMC,IAAI,GAAG,MAAMH,iBAAGI,QAAH,CAAYxB,SAAS,CAACsB,eAAtB,EAAuC;AACxDG,QAAAA,QAAQ,EAAE;AAD8C,OAAvC,CAAnB;AAIAN,MAAAA,WAAW,GAAGO,cAAMC,KAAN,CAAYJ,IAAZ,CAAd;AACD;;AAED,WAAOJ,WAAP;AACD;;AAED,QAAMS,gBAAN,CAAuBT,WAAvB,EAAoC;AAClC,UAAMI,IAAI,GAAGG,cAAMG,SAAN,CAAgBV,WAAhB,EAA6B,IAA7B,EAAmC,IAAnC,CAAb;;AAEA,UAAMC,iBAAGU,SAAH,CAAa9B,SAAS,CAACsB,eAAvB,EAAwCC,IAAxC,EAA8C;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAA9C,CAAN;AACD;;AAED,QAAMC,KAAN,CAAYrB,MAAZ,EAAoBsB,WAApB,EAAiC;AAC/B,QAAId,WAAW,GAAG,MAAM,KAAKD,eAAL,EAAxB;AACA,QAAIgB,MAAJ,EAAYC,EAAZ,EAAgBC,SAAhB;;AAEA,QAAI,CAACjB,WAAW,CAACH,KAAjB,EAAwB;AACtB,WAAKb,GAAL,CAASkC,KAAT,CACE,qEADF;AAGA;AACD;;AAED,SAAKlC,GAAL,CAASmC,IAAT,CAAc,mDAAd;AAEA,QAAIC,WAAW,GAAG,KAAlB;;AAEA,QAAI;AACFL,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAC,8BAAD,CAAxB;AACD,KAFD,CAEE,OAAOwC,KAAP,EAAc;AACdE,MAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAI,CAACA,WAAL,EAAkB;AAChB,WAAKpC,GAAL,CAASkC,KAAT,CACG,4CAA2C1B,MAAO,wBADrD;AAGA;AACD;;AAED,QAAI,CAACQ,WAAW,CAACR,MAAD,CAAhB,EAA0B;AACxByB,MAAAA,SAAS,GAAGpC,SAAS,CAACe,iBAAV,EAAZ;AACAoB,MAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT,CAAX;AAEA,YAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;wBACehC,MAAO;;mCAGrByB,SAAS,CAACpB,KACX;;kCAGCoB,SAAS,CAACnB,IACX;;CAXG,CAAN;;AAgBA,UAAI;AACFiB,QAAAA,MAAM,GAAG,MAAMrC,SAAS,CACrB,oBACCsB,WAAW,CAACH,KAAZ,CAAkBJ,IACnB,2CAA0CuB,EAAE,CAACS,IAAK,EAH7B,CAAxB;AAKA,aAAKzC,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACW,MAArB;AACD,OAPD,CAOE,OAAOR,KAAP,EAAc;AACd,aAAKlC,GAAL,CAASkC,KAAT,CACG,qBAAoB1B,MAAO,qBAAoB0B,KAAK,CAACS,OAAQ,EADhE;AAGA;AACD,OAZD,SAYU;AACRX,QAAAA,EAAE,CAACY,OAAH;AACAZ,QAAAA,EAAE,GAAG,IAAL;AACD;;AAEDhB,MAAAA,WAAW,CAACR,MAAD,CAAX,GAAsByB,SAAtB;AACA,YAAM,KAAKR,gBAAL,CAAsBT,WAAtB,CAAN;AACA;AACD;;AAEDgB,IAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT,CAAX;AAEA,UAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;wBACiBhC,MAAO;;;;CAHrB,CAAN;;AASA,QAAI;AACFuB,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CACrB,oBACCsB,WAAW,CAACH,KAAZ,CAAkBJ,IACnB,2CAA0CuB,EAAE,CAACS,IAAK,EAH7B,CAAxB;AAKA,WAAKzC,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACW,MAArB;AACD,KAPD,CAOE,OAAOR,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CACG,+BAA8B1B,MAAO,qBACpC0B,KAAK,CAACS,OACP,EAHH;AAKA;AACD,KAdD,SAcU;AACRX,MAAAA,EAAE,CAACY,OAAH;AACAZ,MAAAA,EAAE,GAAG,IAAL;AACD;;AAED,QAAI,CAACF,WAAL,EAAkB;AAChB,WAAK9B,GAAL,CAASmC,IAAT,CACG,YAAW3B,MAAO,6CADrB;AAGA;AACD;;AAEDyB,IAAAA,SAAS,GAAGpC,SAAS,CAACe,iBAAV,EAAZ;AAEAoB,IAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT,CAAX;AAEA,UAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;wBACiBhC,MAAO;kCACGyB,SAAS,CAACpB,KAAM;iCACjBoB,SAAS,CAACnB,IAAK;;CALtC,CAAN;;AAUA,QAAI;AACFiB,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CACrB,oBACCsB,WAAW,CAACH,KAAZ,CAAkBJ,IACnB,2CAA0CuB,EAAE,CAACS,IAAK,EAH7B,CAAxB;AAKD,KAND,CAME,OAAOP,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CAAgB,qBAAoB1B,MAAO,4BAA3C;AACA;AACD,KATD,SASU;AACRwB,MAAAA,EAAE,CAACY,OAAH;AACAZ,MAAAA,EAAE,GAAG,IAAL;AACD;;AAEDhB,IAAAA,WAAW,CAACR,MAAD,CAAX,GAAsByB,SAAtB;AACA,UAAM,KAAKR,gBAAL,CAAsBT,WAAtB,CAAN;AAEA,SAAKhB,GAAL,CAASmC,IAAT,CAAe,YAAW3B,MAAO,mCAAjC;AACD;;AAED,QAAMqC,UAAN,CAAiBf,WAAjB,EAA8B;AAC5B,QAAId,WAAW,GAAG,MAAM,KAAKD,eAAL,EAAxB;AACA,QAAIgB,MAAJ,EAAYC,EAAZ,EAAgBC,SAAhB;AAEA,SAAKjC,GAAL,CAASmC,IAAT,CAAc,wDAAd;;AAEA,QAAI;AACFJ,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAC,sCAAD,CAAxB;AACD,KAFD,CAEE,OAAOwC,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CACE,iEADF;AAGA;AACD;;AAED,QAAI,CAAClB,WAAW,CAACH,KAAjB,EAAwB;AACtBoB,MAAAA,SAAS,GAAGpC,SAAS,CAACU,sBAAV,EAAZ;AACAyB,MAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAT,CAAX;AAEA,YAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;;;kCAICP,SAAS,CAACxB,IACX;;oCAE2BwB,SAAS,CAACvB,MAAO;;qCAEhBuB,SAAS,CAACtB,OAAQ;;CAX3C,CAAN;;AAeA,UAAI;AACFoB,QAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAE,SAAQsC,EAAE,CAACS,IAAK,UAAlB,CAAxB;AACD,OAFD,CAEE,OAAOP,KAAP,EAAc;AACd,aAAKlC,GAAL,CAASkC,KAAT,CACG,2CAA0CA,KAAK,CAACS,OAAQ,EAD3D;AAGA;AACD,OAPD,SAOU;AACRX,QAAAA,EAAE,CAACY,OAAH;AACAZ,QAAAA,EAAE,GAAG,IAAL;AACD;;AAED,WAAKhC,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACW,MAArB;AAEA1B,MAAAA,WAAW,CAACH,KAAZ,GAAoBoB,SAApB;AACA,YAAM,KAAKR,gBAAL,CAAsBT,WAAtB,CAAN;AACA;AACD;;AAEDgB,IAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT,CAAX;AAEA,UAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;;;;;;CAFG,CAAN;;AAWA,QAAI;AACFT,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAE,SAAQsC,EAAE,CAACS,IAAK,UAAlB,CAAxB;AACD,KAFD,CAEE,OAAOP,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CACG,sDAAqDA,KAAK,CAACS,OAAQ,EADtE;AAGA;AACD,KAPD,SAOU;AACRX,MAAAA,EAAE,CAACY,OAAH;AACAZ,MAAAA,EAAE,GAAG,IAAL;AACD;;AAED,SAAKhC,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACW,MAArB;;AAEA,QAAI,CAACZ,WAAL,EAAkB;AAChB,WAAK9B,GAAL,CAASmC,IAAT,CACE,uEADF;AAGA;AACD;;AAEDF,IAAAA,SAAS,GAAGpC,SAAS,CAACU,sBAAV,EAAZ;AAEAyB,IAAAA,EAAE,GAAG,MAAMK,oBAAIC,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT,CAAX;AAEA,UAAMtB,iBAAGU,SAAH,CACJK,EAAE,CAACQ,EADC,EAEH;;;iCAG0BP,SAAS,CAACxB,IAAK;mCACbwB,SAAS,CAACvB,MAAO;oCAChBuB,SAAS,CAACtB,OAAQ;;CAP5C,CAAN;;AAWA,QAAI;AACFoB,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAE,SAAQsC,EAAE,CAACS,IAAK,UAAlB,CAAxB;AACD,KAFD,CAEE,OAAOP,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CAAe,mDAAf;AACA;AACD,KALD,SAKU;AACRF,MAAAA,EAAE,CAACY,OAAH;AACAZ,MAAAA,EAAE,GAAG,IAAL;AACD;;AAEDhB,IAAAA,WAAW,CAACH,KAAZ,GAAoBoB,SAApB;AACA,UAAM,KAAKR,gBAAL,CAAsBT,WAAtB,CAAN;AAEA,SAAKhB,GAAL,CAASmC,IAAT,CAAc,iDAAd;AACD;;AAED,QAAMzB,MAAN,CAAaF,MAAb,EAAqBsC,QAArB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsD;AACpD,UAAMhC,WAAW,GAAG,MAAM,KAAKD,eAAL,EAA1B;AACA,UAAMkB,SAAS,GAAGjB,WAAW,CAACH,KAA9B;AACA,UAAMoC,QAAQ,GACZ,uBACGC,GADH,GAEGC,MAFH,CAEU,iBAFV,IAE+B,GAHjC;AAIA,UAAMC,UAAU,GAAI,GAAEL,SAAS,IAAIvC,MAAO,IAAGyC,QAAS,SAAtD;AAEAH,IAAAA,QAAQ,GAAGO,QAAQ,CAACP,QAAD,CAAR,IAAsB,KAAjC;AACAE,IAAAA,UAAU,GAAGA,UAAU,IAAIM,iBAAQC,GAAR,EAA3B;;AAEA,QAAI,CAACtC,iBAAGuC,SAAH,CAAaR,UAAb,EAAyBS,WAAzB,EAAL,EAA6C;AAC3C,YAAM,IAAIpD,KAAJ,CAAW,qBAAoB2C,UAAW,kBAA1C,CAAN;AACD;;AAED,SAAK/C,cAAL,CAAoB,CAAC,WAAD,EAAc,KAAd,CAApB;AACA,UAAMyD,MAAM,GAAG,MAAMrB,oBAAIsB,GAAJ,CAAQ;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAR,CAArB;;AACA,UAAMC,OAAO,GAAGpB,cAAKqB,IAAL,CAAUJ,MAAM,CAACjB,IAAjB,EAAuB,MAAvB,CAAhB;;AAEA,QAAI;AACF,UAAIrC,GAAG,GAAG,IAAV;;AACA,UAAIY,WAAW,CAACN,MAAhB,EAAwB;AACtBN,QAAAA,GAAG,GAAI,oBAAmB0C,QAAS,UACjCY,MAAM,CAACjB,IACR,SAAQjC,MAAO,iBACdyB,SAAS,CAACvB,MACX,iCAJD;AAKD,OAND,MAMO;AACLN,QAAAA,GAAG,GAAI,oBAAmB0C,QAAS,UAASe,OAAQ,SAAQrD,MAAO,EAAnE;AACD;;AACD,UAAIuB,MAAM,GAAG,MAAMrC,SAAS,CAACU,GAAD,CAA5B;AACA,WAAKJ,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACgC,MAArB;;AAEA,UAAIhB,SAAJ,EAAe;AACb;AACA,aAAK/C,GAAL,CAASmC,IAAT,CAAe,yBAAwBY,SAAU,GAAjD;AACA,cAAM9B,iBAAG+C,MAAH,CACJvB,cAAKqB,IAAL,CAAUD,OAAV,EAAmBrD,MAAnB,CADI,EAEJiC,cAAKqB,IAAL,CAAUD,OAAV,EAAmBd,SAAnB,CAFI,CAAN;AAIAvC,QAAAA,MAAM,GAAGuC,SAAT;AACD;;AAEDhB,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAAE,aAAY0D,UAAW,SAAzB,EAAmC;AACzDG,QAAAA,GAAG,EAAEG,MAAM,CAACjB;AAD6C,OAAnC,CAAxB;AAGA,YAAMxB,iBAAGgD,IAAH,CACJxB,cAAKqB,IAAL,CAAUJ,MAAM,CAACjB,IAAjB,EAAuBW,UAAvB,CADI,EAEJX,cAAKqB,IAAL,CAAUd,UAAV,EAAsBI,UAAtB,CAFI,CAAN;AAID,KA/BD,CA+BE,OAAOlB,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CAAgB,8BAA6B1B,MAAO,MAAK0B,KAAK,CAACS,OAAQ,EAAvE;AACA;AACD,KAlCD,SAkCU;AACR,UAAIe,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACd,OAAP;AACD;AACF;;AAED,SAAK5C,GAAL,CAASmC,IAAT,CAAe,qBAAoB3B,MAAO,mBAAkB4C,UAAW,GAAvE;AACD;;AAED,QAAMzC,OAAN,CAAcuD,eAAd,EAA+BpB,QAA/B,EAAyC;AACvC,UAAM9B,WAAW,GAAG,MAAM,KAAKD,eAAL,EAA1B;AACA,UAAMkB,SAAS,GAAGjB,WAAW,CAACH,KAA9B;AAEA,SAAKZ,cAAL,CAAoB,CAAC,cAAD,EAAiB,KAAjB,CAApB;AACAiE,IAAAA,eAAe,GAAGzB,cAAK0B,OAAL,CAAaD,eAAb,CAAlB;AAEApB,IAAAA,QAAQ,GAAGO,QAAQ,CAACP,QAAD,CAAR,IAAsB,KAAjC;AACA,UAAMY,MAAM,GAAG,MAAMrB,oBAAIsB,GAAJ,CAAQ;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAR,CAArB;;AAEA,QAAI;AACF,UAAI7B,MAAM,GAAG,MAAMrC,SAAS,CAAE,aAAYwE,eAAgB,EAA9B,EAAiC;AAC3DX,QAAAA,GAAG,EAAEG,MAAM,CAACjB;AAD+C,OAAjC,CAA5B;AAIA,UAAIrC,GAAG,GAAG,IAAV;;AAEA,UAAIY,WAAW,CAACL,OAAhB,EAAyB;AACvBP,QAAAA,GAAG,GAAI,uBAAsB0C,QAAS,yBACpCb,SAAS,CAACtB,OACX,uCAFD;AAGD,OAJD,MAIO;AACLP,QAAAA,GAAG,GAAI,uBAAsB0C,QAAS,eAAtC;AACD;;AAEDf,MAAAA,MAAM,GAAG,MAAMrC,SAAS,CAACU,GAAD,EAAM;AAAEmD,QAAAA,GAAG,EAAEG,MAAM,CAACjB;AAAd,OAAN,CAAxB;AACA,WAAKzC,GAAL,CAASmC,IAAT,CAAcJ,MAAM,CAACW,MAArB;AACD,KAjBD,CAiBE,OAAOR,KAAP,EAAc;AACd,WAAKlC,GAAL,CAASkC,KAAT,CACG,mCAAkCgC,eAAgB,MAAKhC,KAAK,CAACS,OAAQ,EADxE;AAGA;AACD,KAtBD,SAsBU;AACR,UAAIe,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACd,OAAP;AACD;AACF;;AAED,SAAK5C,GAAL,CAASmC,IAAT,CAAe,sCAAqC+B,eAAgB,GAApE;AACD;;AAED,QAAME,KAAN,CAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AACzB,UAAMC,QAAQ,GAAGC,YAAGD,QAAH,EAAjB;;AACA,UAAME,eAAe,GAAG,OAAOC,aAAP,EAAsBL,IAAtB,EAA4BC,OAA5B,KAAwC;AAC9D,UAAIK,IAAI,GAAGC,gBAAKC,QAAL,EACT,MAAM5D,iBAAGI,QAAH,CAAYqD,aAAZ,EAA2B;AAAEpD,QAAAA,QAAQ,EAAE;AAAZ,OAA3B,CADG,EAAX;;AAIAqD,MAAAA,IAAI,CAACG,QAAL,CAAcC,aAAd,GAA8BV,IAAI,GAAG,SAAH,GAAe,UAAjD;;AAEA,UAAIC,OAAJ,EAAa;AACXK,QAAAA,IAAI,CAACK,GAAL,CAASV,OAAT,GAAmB,IAAnB;AACD,OAFD,MAEO;AACLK,QAAAA,IAAI,CAACK,GAAL,CAASC,MAAT,GAAkB,WAAlB;AACD;;AAED,YAAMC,QAAQ,GAAGN,gBAAKO,QAAL,CAAcR,IAAd,CAAjB;;AAEA,YAAM1D,iBAAGU,SAAH,CAAa+C,aAAb,EAA4BQ,QAA5B,CAAN;AAEA,aAAOA,QAAP;AACD,KAlBD;;AAoBA,SAAKlF,GAAL,CAASmC,IAAT,CACG,iBAAgBkC,IAAI,GAAG,QAAH,GAAc,SAAU,yBAC3CC,OAAO,GAAG,KAAH,GAAW,WACnB,cAAaA,OAAO,GAAG,IAAH,GAAU,EAAG,EAHpC;;AAMA,QAAIC,QAAQ,KAAK,OAAjB,EAA0B;AACxB,UAAIC,YAAGY,QAAH,GAAcC,QAAd,KAA2B,MAA/B,EAAuC;AACrC,aAAKrF,GAAL,CAASkC,KAAT,CAAe,2CAAf;AACA;AACD;;AAED,WAAKjC,cAAL,CAAoB,CAAC,WAAD,EAAc,aAAd,CAApB;AAEA,UAAI8B,MAAM,GAAG,IAAb;;AAEA,UAAI;AACFA,QAAAA,MAAM,GAAG,MAAMpC,uBAAGC,IAAH,CAAQ,gBAAR,CAAf;AACD,OAFD,CAEE,OAAOsC,KAAP,EAAc;AACd,aAAKlC,GAAL,CAASkC,KAAT,CAAgB,mCAAkCA,KAAK,CAACS,OAAQ,EAAhE;AACA;AACD;;AAED,UAAI,CAACZ,MAAM,CAACW,MAAP,CAAc4C,KAAd,CAAoB,iBAApB,CAAL,EAA6C;AAC3C,aAAKtF,GAAL,CAASuF,OAAT,CAAiB,2CAAjB;AACD;;AAEDd,MAAAA,eAAe,CAAC,kBAAD,EAAqBJ,IAArB,EAA2BC,OAA3B,CAAf;;AAEA,UAAI;AACFvC,QAAAA,MAAM,GAAG,MAAMpC,uBAAGC,IAAH,CAAQ,0BAAR,CAAf;AACD,OAFD,CAEE,OAAOsC,KAAP,EAAc;AACd,aAAKlC,GAAL,CAASkC,KAAT,CAAgB,oCAAmCA,KAAK,CAACS,OAAQ,EAAjE;AACD;AACF,KA5BD,MA4BO,IAAI4B,QAAQ,KAAK,QAAjB,EAA2B;AAChC,WAAKtE,cAAL,CAAoB,CAAC,MAAD,CAApB;AAEAwE,MAAAA,eAAe,CAAC,4BAAD,EAA+BJ,IAA/B,EAAqCC,OAArC,CAAf;;AAEA,UAAI;AACF,cAAM3E,uBAAGC,IAAH,CAAQ,+BAAR,CAAN;AACD,OAFD,CAEE,OAAOsC,KAAP,EAAc;AACd,aAAKlC,GAAL,CAASkC,KAAT,CAAgB,wCAAuCA,KAAK,CAACS,OAAQ,EAArE;AACD;AACF,KAVM,MAUA;AACL,WAAK3C,GAAL,CAASkC,KAAT,CACE,sEADF;AAGA;AACD;;AAED,SAAKlC,GAAL,CAASmC,IAAT,CAAc,mBAAd;AACD;;AAED,QAAMqD,GAAN,CAAUC,IAAV,EAAgB;AACd,UAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,QAArB,CADM;AAEdC,MAAAA,OAAO,EAAE,CACP,MADO,EAEP,SAFO,EAGP,eAHO,EAIP,MAJO,EAKP,UALO,EAMP,OANO;AAFK,KAAhB;AAWA,UAAMC,IAAI,GAAG,uBAAUJ,IAAV,EAAgBC,OAAhB,CAAb;;AAEA,QAAIG,IAAI,CAACC,OAAT,EAAkB;AAChB,WAAK9F,GAAL,CAASmC,IAAT,CAAe,GAAE4D,oBAAY,EAA7B;AACA,aAAO,CAAP;AACD;;AAED,QAAIC,OAAO,GAAGH,IAAI,CAACI,CAAL,CAAO,CAAP,CAAd;AAEAD,IAAAA,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAACE,WAAR,EAAH,GAA2B,MAA5C;AAEA,SAAKC,KAAL,GAAa,CAAC,CAACN,IAAI,CAACM,KAApB;AAEA,UAAMlF,iBAAGmF,SAAH,CAAavG,SAAS,CAAC8D,GAAvB,CAAN;AACA,SAAK1D,cAAL,CAAoB,CAAC,OAAD,EAAU,WAAV,CAApB;;AAEA,YAAQ+F,OAAR;AACE,WAAK,OAAL;AACE,YAAIH,IAAI,CAACQ,IAAT,EAAe;AACb,eAAKrG,GAAL,CAASmC,IAAT,CAAe,UAAS,KAAKpC,QAAS;;;;;;;;;;CAAtC;AAWA,iBAAO,CAAP;AACD;;AACD,YAAI8F,IAAI,CAACI,CAAL,CAAO,CAAP,MAAc,OAAlB,EAA2B;AACzB,gBAAM,KAAKpD,UAAL,CAAgBgD,IAAI,CAAC,eAAD,CAApB,CAAN;AACD,SAFD,MAEO;AACL,gBAAM,KAAKhE,KAAL,CAAWgE,IAAI,CAACI,CAAL,CAAO,CAAP,CAAX,EAAsBJ,IAAI,CAAC,eAAD,CAA1B,CAAN;AACD;;AACD;;AACF,WAAK,QAAL;AACE,YAAIA,IAAI,CAACQ,IAAT,EAAe;AACb,eAAKrG,GAAL,CAASmC,IAAT,CAAe,UAAS,KAAKpC,QAAS;;;;;;;;;;;;CAAtC;AAaA,iBAAO,CAAP;AACD;;AACD,cAAMS,MAAM,GAAGqF,IAAI,CAACI,CAAL,CAAO,CAAP,CAAf;;AAEA,YAAI,CAACzF,MAAL,EAAa;AACX,gBAAM,IAAIH,KAAJ,CAAW,6BAAX,CAAN;AACD;;AAED,cAAM,KAAKK,MAAL,CACJF,MADI,EAEJqF,IAAI,CAAC,MAAD,CAFA,EAGJA,IAAI,CAAC,UAAD,CAHA,EAIJA,IAAI,CAAC,QAAD,CAJA,CAAN;AAMA;;AACF,WAAK,SAAL;AACE,YAAIA,IAAI,CAACQ,IAAT,EAAe;AACb,eAAKrG,GAAL,CAASmC,IAAT,CAAe,UAAS,KAAKpC,QAAS;;;;;;;;;;CAAtC;AAWA,iBAAO,CAAP;AACD;;AACD,cAAMmE,eAAe,GAAG2B,IAAI,CAACI,CAAL,CAAO,CAAP,CAAxB;;AAEA,YAAI,CAAC/B,eAAL,EAAsB;AACpB,gBAAM,IAAI7D,KAAJ,CAAW,iCAAX,CAAN;AACD;;AAED,cAAM,KAAKM,OAAL,CAAauD,eAAb,EAA8B2B,IAAI,CAAC,MAAD,CAAlC,CAAN;AACA;;AACF,WAAK,OAAL;AACE,YAAIA,IAAI,CAACQ,IAAT,EAAe;AACb,eAAKrG,GAAL,CAASmC,IAAT,CAAe,UAAS,KAAKpC,QAAS;;;;;;;;;;;CAAtC;AAYA,iBAAO,CAAP;AACD;;AACD,cAAM,KAAKqE,KAAL,CAAWyB,IAAI,CAACxB,IAAhB,EAAsBwB,IAAI,CAAC,UAAD,CAA1B,CAAN;AACA;;AACF,WAAK,MAAL;AACA;AACE,aAAK7F,GAAL,CAASmC,IAAT,CAAe;SACd,KAAKpC,QAAS;;;;;;;;;;;;;;;;;;CADf;AAoBA,eAAO,CAAP;AAnHJ;;AAsHA,WAAO,CAAP;AACD;;AAloBoB;;;;gBAAVF,S,SAME4C,cAAKqB,IAAL,CAAUR,iBAAQgD,GAAR,CAAYC,IAAtB,EAA4B,QAA5B,C;;gBANF1G,S,qBAOc4C,cAAKqB,IAAL,CAAUjE,SAAS,CAAC8D,GAApB,EAAyB,mBAAzB,C","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\nimport os from \"os\"\nimport process from \"process\"\nimport cp from \"child_process\"\nimport { sync as commandExistsSync } from \"command-exists\"\nimport JSON5 from \"json5\"\nimport randomize from \"randomatic\"\nimport tmp from \"tmp-promise\"\nimport { promisify } from \"util\"\nimport moment from \"moment\"\nimport yaml from \"js-yaml\"\n\nconst execAsync = promisify(cp.exec)\n\nexport class BongoTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  static dir = path.join(process.env.HOME, \".bongo\")\n  static credentialsFile = path.join(BongoTool.dir, \"credentials.json5\")\n\n  ensureCommands(cmds) {\n    cmds.forEach((cmd) => {\n      if (!commandExistsSync(cmd)) {\n        throw new Error(`Command '${cmd}' does not exist.  Please install it.`)\n      }\n    })\n  }\n\n  static getPassword() {\n    return randomize(\"Aa0\", 16)\n  }\n\n  static generateAdminPasswords(dbName) {\n    return {\n      root: BongoTool.getPassword(),\n      backup: BongoTool.getPassword(),\n      restore: BongoTool.getPassword(),\n    }\n  }\n\n  static generatePasswords() {\n    return {\n      admin: BongoTool.getPassword(),\n      user: BongoTool.getPassword(),\n    }\n  }\n\n  async readCredentials() {\n    let credentials = {}\n\n    if (fs.existsSync(BongoTool.credentialsFile)) {\n      const json = await fs.readFile(BongoTool.credentialsFile, {\n        encoding: \"utf8\",\n      })\n\n      credentials = JSON5.parse(json)\n    }\n\n    return credentials\n  }\n\n  async writeCredentials(credentials) {\n    const json = JSON5.stringify(credentials, null, \"  \")\n\n    await fs.writeFile(BongoTool.credentialsFile, json, { mode: 0o600 })\n  }\n\n  async users(dbName, newPassword) {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    if (!credentials.admin) {\n      this.log.error(\n        \"No 'admin' database root user.  Run tool on 'admin' database first.\"\n      )\n      return\n    }\n\n    this.log.info(\"Adding admin and user users to ${dbName} database\")\n\n    let hasSecurity = false\n\n    try {\n      result = await execAsync('mongo --eval \"db.getUsers()\"')\n    } catch (error) {\n      hasSecurity = true\n    }\n\n    if (!hasSecurity) {\n      this.log.error(\n        `You must enable MongoDB security to set '${dbName}' database credentials`\n      )\n      return\n    }\n\n    if (!credentials[dbName]) {\n      passwords = BongoTool.generatePasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.dropUser('admin')\ndb.createUser({user:\"admin\",pwd:\"${\n          passwords.admin\n        }\",roles:[\"readWrite\", \"dbAdmin\", \"userAdmin\"]})\ndb.dropUser('user')\ndb.createUser({user:\"user\",pwd:\"${\n          passwords.user\n        }\",roles:[\"readWrite\",\"dbAdmin\"]})\nquit()\n`\n      )\n\n      try {\n        result = await execAsync(\n          `mongo -u root -p ${\n            credentials.admin.root\n          } --authenticationDatabase admin --quiet ${tf.path}`\n        )\n        this.log.info(result.stdout)\n      } catch (error) {\n        this.log.error(\n          `Unable to create '${dbName}' database users. ${error.message}`\n        )\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      credentials[dbName] = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\nassert(db.getUser(\"admin\"))\nassert(db.getUser(\"user\"))\nquit()\n`\n    )\n    try {\n      result = await execAsync(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(\n        `Unable to confirm existing '${dbName}' database users. ${\n          error.message\n        }`\n      )\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    if (!newPassword) {\n      this.log.info(\n        `MongoDB '${dbName}' database users 'admin' & 'user' confirmed`\n      )\n      return\n    }\n\n    passwords = BongoTool.generatePasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.changeUserPassword(\"admin\", \"${passwords.admin}\")\ndb.changeUserPassword(\"user\", \"${passwords.user}\")\nquit()\n`\n    )\n\n    try {\n      result = await execAsync(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n    } catch (error) {\n      this.log.error(`Unable to change '${dbName}' database user passwords.`)\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials[dbName] = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(`MongoDB '${dbName}' database user passwords changed`)\n  }\n\n  async usersAdmin(newPassword) {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    this.log.info(\"Adding root, backup and restore user to admin database\")\n\n    try {\n      result = await execAsync('mongo --eval \"db.getUsers()\" --quiet')\n    } catch (error) {\n      this.log.error(\n        \"You must disable MongoDB security initialize the admin database\"\n      )\n      return\n    }\n\n    if (!credentials.admin) {\n      passwords = BongoTool.generateAdminPasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB('admin')\ndb.dropUser('root')\ndb.createUser({user:\"root\",pwd:\"${\n          passwords.root\n        }\",roles:[\"userAdminAnyDatabase\",\"readAnyDatabase\",\"clusterAdmin\"]})\ndb.dropUser('backup')\ndb.createUser({user:\"backup\",pwd:\"${passwords.backup}\",roles:[\"backup\"]})\ndb.dropUser('restore')\ndb.createUser({user:\"restore\",pwd:\"${passwords.restore}\",roles:[\"restore\"]})\nquit()\n`\n      )\n      try {\n        result = await execAsync(`mongo ${tf.path} --quiet`)\n      } catch (error) {\n        this.log.error(\n          `Unable to create 'root' database users. ${error.message}`\n        )\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      this.log.info(result.stdout)\n\n      credentials.admin = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert(db.getUser(\"root\"))\nassert(db.getUser(\"backup\"))\nassert(db.getUser(\"restore\"))\nquit()\n`\n    )\n\n    try {\n      result = await execAsync(`mongo ${tf.path} --quiet`)\n    } catch (error) {\n      this.log.error(\n        `Unable to confirm existing 'admin' database users. ${error.message}`\n      )\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    this.log.info(result.stdout)\n\n    if (!newPassword) {\n      this.log.info(\n        \"MongoDB 'admin' database users 'root', 'backup' & 'restore' confirmed\"\n      )\n      return\n    }\n\n    passwords = BongoTool.generateAdminPasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert.eq(db, \"admin\")\ndb.changeUserPassword(\"root\", \"${passwords.root}\")\ndb.changeUserPassword(\"backup\", \"${passwords.backup}\")\ndb.changeUserPassword(\"restore\", \"${passwords.restore}\")\nquit()\n`\n    )\n    try {\n      result = await execAsync(`mongo ${tf.path} --quiet`)\n    } catch (error) {\n      this.log.error(\"Unable to change 'admin' database user passwords.\")\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials.admin = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(\"MongoDB 'admin' database user passwords changed\")\n  }\n\n  async backup(dbName, hostPort, newDbName, outputPath) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n    const dateTime =\n      moment()\n        .utc()\n        .format(\"YYYYMMDD-hhmmss\") + \"Z\"\n    const backupFile = `${newDbName || dbName}-${dateTime}.tar.gz`\n\n    hostPort = parseInt(hostPort) || 27017\n    outputPath = outputPath || process.cwd()\n\n    if (!fs.lstatSync(outputPath).isDirectory()) {\n      throw new Error(`Output directory '${outputPath}' does not exist`)\n    }\n\n    this.ensureCommands([\"mongodump\", \"tar\"])\n    const tmpObj = await tmp.dir({ unsafeCleanup: true })\n    const dumpDir = path.join(tmpObj.path, \"dump\")\n\n    try {\n      let cmd = null\n      if (credentials.backup) {\n        cmd = `mongodump --port ${hostPort} --out ${\n          tmpObj.path\n        } --db ${dbName} -u backup -p ${\n          passwords.backup\n        } --authenticationDatabase=admin`\n      } else {\n        cmd = `mongodump --port ${hostPort} --out ${dumpDir} --db ${dbName}`\n      }\n      let result = await execAsync(cmd)\n      this.log.info(result.stderr)\n\n      if (newDbName) {\n        // Rename the database directory\n        this.log.info(`Renaming database to '${newDbName}'`)\n        await fs.rename(\n          path.join(dumpDir, dbName),\n          path.join(dumpDir, newDbName)\n        )\n        dbName = newDbName\n      }\n\n      result = await execAsync(`tar -czvf ${backupFile} dump/*`, {\n        cwd: tmpObj.path,\n      })\n      await fs.move(\n        path.join(tmpObj.path, backupFile),\n        path.join(outputPath, backupFile)\n      )\n    } catch (error) {\n      this.log.error(`Unable to backup database '${dbName}'. ${error.message}`)\n      return\n    } finally {\n      if (tmpObj) {\n        tmpObj.cleanup()\n      }\n    }\n\n    this.log.info(`MongoDB database '${dbName}' backed up to '${backupFile}'`)\n  }\n\n  async restore(archiveFilename, hostPort) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n\n    this.ensureCommands([\"mongorestore\", \"tar\"])\n    archiveFilename = path.resolve(archiveFilename)\n\n    hostPort = parseInt(hostPort) || 27017\n    const tmpObj = await tmp.dir({ unsafeCleanup: true })\n\n    try {\n      let result = await execAsync(`tar -x -f ${archiveFilename}`, {\n        cwd: tmpObj.path,\n      })\n\n      let cmd = null\n\n      if (credentials.restore) {\n        cmd = `mongorestore --port ${hostPort} --drop -u restore -p ${\n          passwords.restore\n        } --authenticationDatabase=admin dump/`\n      } else {\n        cmd = `mongorestore --port ${hostPort} --drop dump/`\n      }\n\n      result = await execAsync(cmd, { cwd: tmpObj.path })\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(\n        `Unable to restore archive file '${archiveFilename}'. ${error.message}`\n      )\n      return\n    } finally {\n      if (tmpObj) {\n        tmpObj.cleanup()\n      }\n    }\n\n    this.log.info(`MongoDB database(s) restored from '${archiveFilename}'`)\n  }\n\n  async mongo(auth, bindAll) {\n    const platform = os.platform()\n    const modifyMongoConf = async (mongoConfFile, auth, bindAll) => {\n      let conf = yaml.safeLoad(\n        await fs.readFile(mongoConfFile, { encoding: \"utf8\" })\n      )\n\n      conf.security.authorization = auth ? \"enabled\" : \"disabled\"\n\n      if (bindAll) {\n        conf.net.bindAll = true\n      } else {\n        conf.net.bindIp = \"127.0.0.1\"\n      }\n\n      const confYaml = yaml.safeDump(conf)\n\n      await fs.writeFile(mongoConfFile, confYaml)\n\n      return confYaml\n    }\n\n    this.log.info(\n      `Attempting to ${auth ? \"enable\" : \"disable\"} security and bind to ${\n        bindAll ? \"all\" : \"localhost\"\n      } IP address${bindAll ? \"es\" : \"\"}`\n    )\n\n    if (platform === \"linux\") {\n      if (os.userInfo().username !== \"root\") {\n        this.log.error(\"Must run this command under sudo on Linux\")\n        return\n      }\n\n      this.ensureCommands([\"systemctl\", \"lsb_release\"])\n\n      let result = null\n\n      try {\n        result = await cp.exec(\"lsb_release -a\")\n      } catch (error) {\n        this.log.error(`Cannot determine Linux release. ${error.message}`)\n        return\n      }\n\n      if (!result.stdout.match(/Ubuntu 1(6|8)\\./)) {\n        this.log.warning(\"This release of Linux has not been tested\")\n      }\n\n      modifyMongoConf(\"/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        result = await cp.exec(\"systemctl restart mongod\")\n      } catch (error) {\n        this.log.error(`Cannot restart 'mongod' service. ${error.message}`)\n      }\n    } else if (platform === \"darwin\") {\n      this.ensureCommands([\"brew\"])\n\n      modifyMongoConf(\"/usr/local/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        await cp.exec(\"brew services restart mongodb\")\n      } catch (error) {\n        this.log.error(`Unable to restart 'mongodb' service. ${error.message}`)\n      }\n    } else {\n      this.log.error(\n        \"This platform is not yet supported. Please consider submitting a PR!\"\n      )\n      return\n    }\n\n    this.log.info(\"MongoDB restarted\")\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"port\", \"new-name\", \"output\"],\n      boolean: [\n        \"help\",\n        \"version\",\n        \"new-passwords\",\n        \"auth\",\n        \"bind-all\",\n        \"debug\",\n      ],\n    }\n    const args = parseArgs(argv, options)\n\n    if (args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    let command = args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    this.debug = !!args.debug\n\n    await fs.ensureDir(BongoTool.dir)\n    this.ensureCommands([\"mongo\", \"mongostat\"])\n\n    switch (command) {\n      case \"users\":\n        if (args.help) {\n          this.log.info(`Usage: ${this.toolName} users [db]\n\nDescription:\n\nEnsures that the users 'admin' & 'user' exist on regular database, and 'root',\nor 'backup' & 'restore' users if the 'admin' database is specified.\n\nOptions:\n\n  --new-passwords   Generate new passwords for existing users.\n`)\n          return 0\n        }\n        if (args._[1] === \"admin\") {\n          await this.usersAdmin(args[\"new-passwords\"])\n        } else {\n          await this.users(args._[1], args[\"new-passwords\"])\n        }\n        break\n      case \"backup\":\n        if (args.help) {\n          this.log.info(`Usage: ${this.toolName} backup <options> <db>\n\nDescription:\n\nBacks up all non-system collections in the given database creating a\ntimestamped .tar.gz file.\n\nOptions:\n\n--port          Host port, for when there are multiple mongod instances\n--new-name      Rename the database when backing it up\n--output        Output directory or filename for archive file\n`)\n          return 0\n        }\n        const dbName = args._[1]\n\n        if (!dbName) {\n          throw new Error(`Database name must be given`)\n        }\n\n        await this.backup(\n          dbName,\n          args[\"port\"],\n          args[\"new-name\"],\n          args[\"output\"]\n        )\n        break\n      case \"restore\":\n        if (args.help) {\n          this.log.info(`Usage: ${this.toolName} restore <options> <archive>\n\nDescription:\n\nRestores the database in the given .tar.gz file.  The database will be restored\nwith the name it had when backed up.\n\nOptions:\n\n--port       Host port, for when there are multiple mongod instances\n`)\n          return 0\n        }\n        const archiveFilename = args._[1]\n\n        if (!archiveFilename) {\n          throw new Error(`Archive file name must be given`)\n        }\n\n        await this.restore(archiveFilename, args[\"port\"])\n        break\n      case \"mongo\":\n        if (args.help) {\n          this.log.info(`Usage: ${this.toolName} mongo [online|offline]\n\nDescription:\n\nBrings the the MongoDB daemon online or offline to enable changes to the\nthe admin database 'root', 'backup' and 'restore' users.\n\nOptions:\n\n--[no-]auth       Enabled/disable security for the MongoDB instance\n--[no-]bind-all   Bind to all network interfaces or bind only to localhost\n`)\n          return 0\n        }\n        await this.mongo(args.auth, args[\"bind-all\"])\n        break\n      case \"help\":\n      default:\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nDescription:\n\nOpinionated MongoDB management tool. Ensures correct users and passwords\nfor databases and stores them in a credentials file. Generates and\nrestores backups archives using stored credentials.\n\nCommands:\n  users      Ensures that appropriate users and passwords exist\n             for a database.\n  backup     Create a timestamped backup of a database.\n  restore    Restore a database backup.\n  mongo      Take MongoDB service offline or online.\n\nGlobal Options:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"],"file":"BongoTool.js"}