{"version":3,"sources":["../src/BongoTool.js"],"names":["BongoTool","constructor","toolName","log","ensureCommands","cmds","forEach","cmd","Error","getPassword","generateAdminPasswords","dbName","root","backup","restore","generatePasswords","admin","user","readCredentials","credentials","existsSync","credentialsFile","json","readFile","encoding","parse","writeCredentials","stringify","writeFile","mode","users","result","tf","passwords","error","hasSecurity","exec","file","postfix","fd","path","info","stdout","cleanup","args","usersAdmin","dateTime","utc","format","backupFile","message","mongo","auth","bindAll","platform","modifyMongoConf","mongoConfFile","conf","safeLoad","security","authorization","net","bindIp","confYaml","safeDump","userInfo","username","match","run","argv","options","boolean","version","command","_","toLowerCase","ensureDir","dir","help","join","env","HOME"],"mappings":"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","file":"BongoTool.js","sourcesContent":["import { sync as globSync } from \"glob\"\nimport parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport util from \"util\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\nimport os from \"os\"\nimport process from \"process\"\nimport cp from \"child_process\"\nimport { sync as commandExistsSync } from \"command-exists\"\nimport JSON5 from \"json5\"\nimport randomize from \"randomatic\"\nimport tmp from \"tmp-promise\"\nimport { promisify } from \"util\"\nimport moment from \"moment\"\nimport yaml from \"js-yaml\"\n\nexport class BongoTool {\n  constructor(toolName, log) {\n    this.toolName = toolName\n    this.log = log\n  }\n\n  static dir = path.join(process.env.HOME, \".bongo\")\n  static credentialsFile = path.join(BongoTool.dir, \"credentials.json5\")\n\n  ensureCommands(cmds) {\n    cmds.forEach((cmd) => {\n      if (!commandExistsSync(cmd)) {\n        throw new Error(`Command '${cmd}' does not exist.  Please install it.`)\n      }\n    })\n  }\n\n  static getPassword() {\n    return randomize(\"Aa0\", 16)\n  }\n\n  static generateAdminPasswords(dbName) {\n    return {\n      root: BongoTool.getPassword(),\n      backup: BongoTool.getPassword(),\n      restore: BongoTool.getPassword(),\n    }\n  }\n\n  static generatePasswords() {\n    return {\n      admin: BongoTool.getPassword(),\n      user: BongoTool.getPassword(),\n    }\n  }\n\n  async readCredentials() {\n    let credentials = {}\n\n    if (fs.existsSync(BongoTool.credentialsFile)) {\n      const json = await fs.readFile(BongoTool.credentialsFile, {\n        encoding: \"utf8\",\n      })\n\n      credentials = JSON5.parse(json)\n    }\n\n    return credentials\n  }\n\n  async writeCredentials(credentials) {\n    const json = JSON5.stringify(credentials, null, \"  \")\n\n    await fs.writeFile(BongoTool.credentialsFile, json, { mode: 0o600 })\n  }\n\n  async users(dbName) {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    if (!credentials.admin) {\n      this.log.error(\n        \"No 'admin' database root user.  Run tool on 'admin' database first.\"\n      )\n      return\n    }\n\n    let hasSecurity = false\n\n    try {\n      result = await promisify(cp.exec)('mongo --eval \"db.getUsers()\"')\n    } catch (error) {\n      hasSecurity = true\n    }\n\n    if (!hasSecurity) {\n      this.log.error(\n        `You must enable MongoDB security to set '${dbName}' database credentials`\n      )\n      return\n    }\n\n    if (!credentials[dbName]) {\n      passwords = BongoTool.generatePasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.dropUser('admin')\ndb.createUser({user:\"admin\",pwd:\"${\n          passwords.admin\n        }\",roles:[\"readWrite\", \"dbAdmin\", \"userAdmin\"]})\ndb.dropUser('user')\ndb.createUser({user:\"user\",pwd:\"${\n          passwords.user\n        }\",roles:[\"readWrite\",\"dbAdmin\"]})\nquit()\n`\n      )\n\n      try {\n        result = await promisify(cp.exec)(\n          `mongo -u root -p ${\n            credentials.admin.root\n          } --authenticationDatabase admin --quiet ${tf.path}`\n        )\n        this.log.info(result.stdout)\n      } catch (error) {\n        this.log.error(`Unable to create '${dbName}' database users`)\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      credentials[dbName] = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\nassert(db.getUser(\"admin\"))\nassert(db.getUser(\"user\"))\nquit()\n`\n    )\n    try {\n      result = await promisify(cp.exec)(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(`Unable to confirm existing '${dbName}' database users.`)\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    if (!this.args[\"new-passwords\"]) {\n      this.log.info(\n        `MongoDB '${dbName}' database users 'admin' & 'user' confirmed`\n      )\n      return\n    }\n\n    passwords = BongoTool.generatePasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"${dbName}\")\ndb.changeUserPassword(\"admin\", \"${passwords.admin}\")\ndb.changeUserPassword(\"user\", \"${passwords.user}\")\nquit()\n`\n    )\n\n    try {\n      result = await promisify(cp.exec)(\n        `mongo -u root -p ${\n          credentials.admin.root\n        } --authenticationDatabase admin --quiet ${tf.path}`\n      )\n    } catch (error) {\n      this.log.error(`Unable to change '${dbName}' database user passwords.`)\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials[dbName] = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(`MongoDB '${dbName}' database user passwords changed`)\n  }\n\n  async usersAdmin() {\n    let credentials = await this.readCredentials()\n    let result, tf, passwords\n\n    try {\n      result = await promisify(cp.exec)('mongo --eval \"db.getUsers()\" --quiet')\n    } catch (error) {\n      this.log.error(\n        \"You must disable MongoDB security initialize the admin database\"\n      )\n      return\n    }\n\n    if (!credentials.admin) {\n      passwords = BongoTool.generateAdminPasswords()\n      tf = await tmp.file({ postfix: \".js\" })\n\n      await fs.writeFile(\n        tf.fd,\n        `\ndb = db.getSiblingDB('admin')\ndb.dropUser('root')\ndb.createUser({user:\"root\",pwd:\"${\n          passwords.root\n        }\",roles:[\"userAdminAnyDatabase\",\"readAnyDatabase\",\"clusterAdmin\"]})\ndb.dropUser('backup')\ndb.createUser({user:\"backup\",pwd:\"${passwords.backup}\",roles:[\"backup\"]})\ndb.dropUser('restore')\ndb.createUser({user:\"restore\",pwd:\"${passwords.restore}\",roles:[\"restore\"]})\nquit()\n`\n      )\n      try {\n        result = await promisify(cp.exec)(`mongo ${tf.path} --quiet`)\n        this.log.info(result.stdout)\n      } catch (error) {\n        this.log.error(\"Unable to create 'admin' database users\")\n        return\n      } finally {\n        tf.cleanup()\n        tf = null\n      }\n\n      credentials.admin = passwords\n      await this.writeCredentials(credentials)\n      return\n    }\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert(db.getUser(\"root\"))\nassert(db.getUser(\"backup\"))\nassert(db.getUser(\"restore\"))\nquit()\n`\n    )\n\n    try {\n      result = await promisify(cp.exec)(`mongo ${tf.path} --quiet`)\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(\"Unable to confirm existing 'admin' database users.\")\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    if (!this.args[\"new-passwords\"]) {\n      this.log.info(\n        \"MongoDB 'admin' database users 'root', 'backup' & 'restore' confirmed\"\n      )\n      return\n    }\n\n    passwords = BongoTool.generateAdminPasswords()\n\n    tf = await tmp.file({ postfix: \".js\" })\n\n    await fs.writeFile(\n      tf.fd,\n      `\ndb = db.getSiblingDB(\"admin\")\nassert.eq(db, \"admin\")\ndb.changeUserPassword(\"root\", \"${passwords.root}\")\ndb.changeUserPassword(\"backup\", \"${passwords.backup}\")\ndb.changeUserPassword(\"restore\", \"${passwords.restore}\")\nquit()\n`\n    )\n    try {\n      result = await promisify(cp.exec)(`mongo ${tf.path} --quiet`)\n    } catch (error) {\n      this.log.error(\"Unable to change 'admin' database user passwords.\")\n      return\n    } finally {\n      tf.cleanup()\n      tf = null\n    }\n\n    credentials.admin = passwords\n    await this.writeCredentials(credentials)\n\n    this.log.info(\"MongoDB 'admin' database user passwords changed\")\n  }\n\n  async backup(dbName) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n    const dateTime =\n      moment()\n        .utc()\n        .format(\"YYYYMMDD-hhmmss\") + \"Z\"\n    const backupFile = `${dbName}-${dateTime}.archive`\n\n    try {\n      const result = await promisify(cp.exec)(\n        `mongodump --gzip --archive=${backupFile} --db ${dbName} -u backup -p ${\n          passwords.backup\n        } --authenticationDatabase=admin`\n      )\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(`Unable to backup database '${dbName}'. ${error.message}`)\n      return\n    }\n\n    this.log.info(`MongoDB database '${dbName}' backed up to '${backupFile}'`)\n  }\n\n  async restore(dbName, backupFile) {\n    const credentials = await this.readCredentials()\n    const passwords = credentials.admin\n\n    try {\n      const result = await promisify(cp.exec)(\n        `mongorestore --gzip --archive=${backupFile} --drop --db ${dbName} -u restore -p ${\n          passwords.restore\n        } --authenticationDatabase=admin`\n      )\n      this.log.info(result.stdout)\n    } catch (error) {\n      this.log.error(`Unable to restore database '${dbName}'. ${error.message}`)\n      return\n    }\n\n    this.log.info(`MongoDB database '${dbName}' restored from '${backupFile}'`)\n  }\n\n  async mongo(auth, bindAll) {\n    const platform = os.platform()\n    const modifyMongoConf = async (mongoConfFile, auth, bindAll) => {\n      let conf = yaml.safeLoad(\n        await fs.readFile(mongoConfFile, { encoding: \"utf8\" })\n      )\n\n      conf.security.authorization = auth ? \"enabled\" : \"disabled\"\n\n      if (bindAll) {\n        conf.net.bindAll = true\n      } else {\n        conf.net.bindIp = \"127.0.0.1\"\n      }\n\n      const confYaml = yaml.safeDump(conf)\n\n      await fs.writeFile(mongoConfFile, confYaml)\n\n      return confYaml\n    }\n\n    this.log.info(\n      `Attempting to ${auth ? \"enable\" : \"disable\"} security and bind to ${\n        bindAll ? \"all\" : \"localhost\"\n      } IP address${bindAll ? \"es\" : \"\"}`\n    )\n\n    if (platform === \"linux\") {\n      if (os.userInfo().username !== \"root\") {\n        this.log.error(\"Must run this command under sudo on Linux\")\n        return\n      }\n\n      this.ensureCommands([\"systemctl\", \"lsb_release\"])\n\n      let result = null\n\n      try {\n        result = await cp.exec(\"lsb_release -a\")\n      } catch (error) {\n        this.log.error(`Cannot determine Linux release. ${error.message}`)\n        return\n      }\n\n      if (!result.stdout.match(/Ubuntu 16\\.04/)) {\n        this.log.error(\"This release of Linux has not been tested\")\n        return\n      }\n\n      modifyMongoConf(\"/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        result = await cp.exec(\"systemctl restart mongod\")\n      } catch (error) {\n        this.log.error(`Cannot restart 'mongod' service. ${error.message}`)\n      }\n    } else if (platform === \"darwin\") {\n      this.ensureCommands([\"brew\"])\n\n      modifyMongoConf(\"/usr/local/etc/mongod.conf\", auth, bindAll)\n\n      try {\n        await cp.exec(\"brew restart mongodb\")\n      } catch (error) {\n        this.log.error(`Unable to restart 'mongodb' service. ${error.message}`)\n      }\n    } else {\n      this.log.error(\n        \"This platform is not yet supported. Please consider submitting a PR!\"\n      )\n      return\n    }\n\n    this.log.info(\"MongoDB restarted\")\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [\"help\", \"version\", \"new-passwords\", \"auth\", \"bind-all\"],\n    }\n    this.args = parseArgs(argv, options)\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    let command = this.args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    await fs.ensureDir(BongoTool.dir)\n    this.ensureCommands([\"mongo\", \"mongostat\"])\n\n    switch (command) {\n      case \"users\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} users [db]\n\nDescription:\n\nEnsures that the users 'admin' & 'user' exist on regular database, and 'root',\n'backup' & 'restore' if the 'admin' database is specified.\n\nOptions:\n\n-new-passwords   Generate new passwords for existing users.\n`)\n          return 0\n        }\n        if (this.args._[1] === \"admin\") {\n          await this.usersAdmin()\n        } else {\n          await this.users(this.args._[1])\n        }\n        break\n      case \"backup\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} backup <db>\n\nDescription:\n\nBacks up all non-system collections in the given database creating a\ntimestamped .archive file.\n`)\n          return 0\n        }\n        await this.backup(this.args._[1])\n        break\n      case \"restore\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} restore <db> <archive>\n\nDescription:\n\nCreates or overwrites the specified database with the given .archive file.\n`)\n          return 0\n        }\n        await this.restore(this.args._[1], this.args._[2])\n        break\n      case \"mongo\":\n        if (this.args.help) {\n          this.log.info(`Usage: ${this.toolName} mongo [online|offline]\n\nDescription:\n\nBrings the the MongoDB daemon online or offline to enable changes to the\nthe admin database 'root', 'backup' and 'restore' users.\n\nOptions:\n\n--[no-]auth       Enabled/disable security for the MongoDB instance\n--[no-]bind-all   Bind to all network interfaces or bind only to localhost\n`)\n          return 0\n        }\n        await this.mongo(this.args.auth, this.args[\"bind-all\"])\n        break\n      case \"help\":\n      default:\n        this.log.info(`\nUsage: ${this.toolName} <cmd> [options]\n\nDescription:\n\nOpinionated MongoDB management tool. Ensures correct users and passwords\nfor databases and stores them in a credentials file. Generates and\nrestores backups archives using stored credentials.\n\nCommands:\n  users      Ensures that appropriate users and passwords exist\n             for a database.\n  backup     Create a timestamped backup of a database.\n  restore    Restore a database backup.\n  mongo      Take MongoDB service offline or online.\n\nGlobal Options:\n  --help                        Shows this help.\n  --version                     Shows the tool version.\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"]}